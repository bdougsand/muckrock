# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-10-04 15:25
from __future__ import unicode_literals

import re
import resource
from email.utils import parseaddr, getaddresses
import traceback

from django.db import migrations
from django.contrib.auth.models import User


def _normalize_email(email):
    """Username is case sensitive, domain is not"""
    if '@' not in email:
        raise ValueError('Invalid email "%s"' % email)
    username, domain = email.rsplit('@', 1)
    return '%s@%s' % (username, domain.lower())


def fetch(objects, address):
    """Fetch an email address object based on an email header"""
    name, email = parseaddr(address)
    email = _normalize_email(email)
    email_address, _ = objects.update_or_create(
            email=email,
            defaults={'name': name},
            )
    return email_address


def fetch_many(objects, *addresses):
    """Fetch multiple email address objects based on an email header"""
    name_emails = getaddresses(addresses)
    addresses = []
    for name, email in name_emails:
        try:
            email = _normalize_email(email)
        except ValueError:
            print 'ERROR bad email: %s' % email
            continue
        email_address, _ = objects.update_or_create(
                email=email,
                defaults={'name': name},
                )
        addresses.append(email_address)
    return addresses


def migrate_requests(apps, schema_editor):
    FOIARequest = apps.get_model('foia', 'FOIARequest')
    EmailAddress = apps.get_model('communication', 'EmailAddress')
    PhoneNumber = apps.get_model('communication', 'PhoneNumber')
    email_separator_re = re.compile(r'[^\w\.\-\+\&@_\'"%/]+')

    total = FOIARequest.objects.count()
    for foia in FOIARequest.objects.all():
        if foia.old_email:
            if '@' in foia.old_email:
                try:
                    email_addr = fetch(EmailAddress.objects, foia.old_email)
                    foia.email = email_addr
                    foia.save()
                except ValueError as exc:
                    print 'ERROR: Bad foia old email: %s - %s - %s' % (foia.pk, foia.title, foia.old_email)
            elif foia.old_email.isdigit() and 10 <= len(foia.old_email) <= 11:
                phone, _ = PhoneNumber.objects.update_or_create(
                        number=foia.old_email,
                        defaults={'type': 'fax'},
                        )
                if phone.number.national_number:
                    foia.fax = phone
                    foia.save()
                else:
                    print 'ERROR: bad fax %s - %s - %s' % (foia.pk, foia.title, foia.old_email)
            else:
                print('What is this?: %s - %s - %s - %s' % (foia.pk, foia.title, foia.status, foia.old_email))
        if foia.other_emails:
            for email in email_separator_re.split(foia.other_emails):
                if not email:
                    continue
                try:
                    email_addr = fetch(EmailAddress.objects, email)
                    foia.cc_emails.add(email_addr)
                except ValueError as exc:
                    print 'ERROR: Bad foia other email: %s - %s - %s - %s - %s - %s' % (foia.pk, foia.title, foia.status, email, foia.other_emails, exc)


def migrate_comms(apps, schema_editor):
    FOIACommunication = apps.get_model('foia', 'FOIACommunication')
    RawEmail = apps.get_model('foia', 'RawEmail')
    EmailAddress = apps.get_model('communication', 'EmailAddress')
    PhoneNumber = apps.get_model('communication', 'PhoneNumber')
    EmailCommunication = apps.get_model('communication', 'EmailCommunication')
    FaxCommunication = apps.get_model('communication', 'FaxCommunication')
    MailCommunication = apps.get_model('communication', 'MailCommunication')
    WebCommunication = apps.get_model('communication', 'WebCommunication')
    EmailError = apps.get_model('communication', 'EmailError')
    FaxError = apps.get_model('communication', 'FaxError')
    EmailOpen = apps.get_model('communication', 'EmailOpen')

    i = 0
    total = FOIACommunication.objects.count()
    for comm in FOIACommunication.objects.iterator():
        if i % 10000 == 0:
            print '%d%%' % (100 * (i / float(total)))
        i += 1
        try:
            if comm.delivered == 'email':
                from_email = None
                to_emails = []
                try:
                    if comm.priv_from_who:
                        from_email = fetch(EmailAddress.objects, comm.priv_from_who)
                except ValueError as exc:
                    print 'ERROR priv_from_who: %s - %s - %s' % (comm.pk, comm.priv_from_who, exc.args[0])
                try:
                    to_emails = fetch_many(EmailAddress.objects, comm.priv_to_who)
                except ValueError as exc:
                    print 'ERROR priv_to_who: %s - %s - %s' % (comm.pk, comm.priv_to_who, exc.args[0])
                email = EmailCommunication.objects.create(
                        communication=comm,
                        sent_datetime=comm.date,
                        confirmed_datetime=comm.confirmed,
                        from_email=from_email,
                        )
                email.to_emails.set(to_emails)
                try:
                    comm.rawemail.email = email
                    comm.rawemail.save()
                except RawEmail.DoesNotExist:
                    pass
                for open_ in comm.opens.all():
                    EmailOpen.objects.create(
                            email=email,
                            datetime=open_.date,
                            recipient=fetch(EmailAddress.objects, open_.recipient),
                            city=open_.city,
                            region=open_.region,
                            country=open_.country,
                            client_type=open_.client_type,
                            client_name=open_.client_name,
                            client_os=open_.client_os,
                            device_type=open_.device_type,
                            user_agent=open_.user_agent,
                            ip_address=open_.ip_address,
                            )
                for error in comm.errors.all():
                    try:
                        if error.recipient:
                            recipient = fetch(EmailAddress.objects, error.recipient)
                            EmailError.objects.create(
                                    email=email,
                                    datetime=error.date,
                                    recipient=recipient,
                                    code=error.code,
                                    error=error.error,
                                    event=error.event,
                                    reason=error.reason,
                                    )
                    except ValueError as exc:
                        print 'ERROR recipient: %s - %s - %s' % (comm.pk, error.recipient, exc.args[0])
            elif comm.delivered == 'fax':
                fax = FaxCommunication.objects.create(
                        communication=comm,
                        sent_datetime=comm.date,
                        confirmed_datetime=comm.confirmed,
                        fax_id=comm.fax_id,
                        )
                for error in comm.errors.all():
                    if error.recipient:
                        recipient, _ = PhoneNumber.objects.get_or_create(number=error.recipient)
                    else:
                        recipient = None
                    FaxError.objects.create(
                            fax=fax,
                            datetime=error.date,
                            recipient=recipient,
                            error_type=error.error[:255],
                            error_code=error.reason,
                            )
            elif comm.delivered == 'mail':
                MailCommunication.objects.create(
                        communication=comm,
                        sent_datetime=comm.date,
                        )
            elif comm.delivered == 'web':
                WebCommunication.objects.create(
                        communication=comm,
                        sent_datetime=comm.date,
                        )
        except Exception as exc:
            print "UNCAUGHT EXCEPTION: %s" % comm.pk
            traceback.print_exc()


class Migration(migrations.Migration):

    dependencies = [
        ('foia', '0037_auto_20171010_1007'),
        ('communication', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_requests, lambda a, s: None),
        migrations.RunPython(migrate_comms, lambda a, s: None),
    ]
