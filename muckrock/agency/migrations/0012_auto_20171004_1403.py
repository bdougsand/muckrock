# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-10-04 14:03
from __future__ import unicode_literals
import re
from django.db import migrations


def migrate_addresses(apps, schema_editor):
    Agency = apps.get_model('agency', 'Agency')
    AgencyAddress = apps.get_model('agency', 'AgencyAddress')
    AgencyEmail = apps.get_model('agency', 'AgencyEmail')
    AgencyPhone = apps.get_model('agency', 'AgencyPhone')
    Address = apps.get_model('communication', 'Address')
    EmailAddress = apps.get_model('communication', 'EmailAddress')
    PhoneNumber = apps.get_model('communication', 'PhoneNumber')
    email_separator_re = re.compile(r'[^\w\.\-\+\&@_]+')

    for agency in Agency.objects.all():
        if agency.address:
            addr = Address.objects.get_or_create(address=agency.address)
            AgencyAddress.objects.create(
                    agency=agency,
                    address=addr,
                    request_type='primary',
                    )
        if agency.email:
            email_addr = EmailAddress.objects.fetch(agency.email)
            AgencyEmail.objects.create(
                    agency=agency,
                    email=email_addr,
                    request_type='primary',
                    email_type='to',
                    )
        if agency.other_emails:
            for email in email_separator_re.split(agency.other_emails):
                email_addr = EmailAddress.objects.fetch(email)
                AgencyEmail.objects.create(
                        agency=agency,
                        email=email_addr,
                        request_type='primary',
                        email_type='to',
                        )
        if agency.phone:
            # XXX do something if this fails validation
            phone = PhoneNumber.objects.get_or_create(
                    number=agency.phone,
                    type='phone',
                    )
            AgencyPhone.objects.create(
                    agency=agency,
                    phone=phone,
                    )
        if agency.fax:
            # XXX do something if this fails validation
            phone = PhoneNumber.objects.get_or_create(
                    number=agency.fax,
                    type='fax',
                    )
            AgencyPhone.objects.create(
                    agency=agency,
                    phone=phone,
                    request_type='primary',
                    )



class Migration(migrations.Migration):

    dependencies = [
        ('agency', '0011_auto_20171004_1353'),
        ('communication', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_addresses, lambda a, s: None),
    ]
