# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-10-04 14:03
from __future__ import unicode_literals

import re
from email.utils import parseaddr, getaddresses

from django.db import migrations


def _normalize_email(email):
    """Username is case sensitive, domain is not"""
    if '@' not in email:
        raise ValueError('Invalid email "%s"' % email)
    username, domain = email.rsplit('@', 1)
    return '%s@%s' % (username, domain.lower())


def fetch(objects, address):
    """Fetch an email address object based on an email header"""
    name, email = parseaddr(address)
    email = _normalize_email(email)
    email_address, _ = objects.update_or_create(
            email=email,
            defaults={'name': name},
            )
    return email_address


def fetch_many(objects, *addresses):
    """Fetch multiple email address objects based on an email header"""
    name_emails = getaddresses(addresses)
    addresses = []
    for name, email in name_emails:
        email = _normalize_email(email)
        email_address, _ = objects.update_or_create(
                email=email,
                defaults={'name': name},
                )
        addresses.append(email_address)
    return addresses


def migrate_addresses(apps, schema_editor):
    Agency = apps.get_model('agency', 'Agency')
    AgencyAddress = apps.get_model('agency', 'AgencyAddress')
    AgencyEmail = apps.get_model('agency', 'AgencyEmail')
    AgencyPhone = apps.get_model('agency', 'AgencyPhone')
    Address = apps.get_model('communication', 'Address')
    EmailAddress = apps.get_model('communication', 'EmailAddress')
    PhoneNumber = apps.get_model('communication', 'PhoneNumber')
    email_separator_re = re.compile(r'[^\w\.\-\+\&@_]+')

    for agency in Agency.objects.all():
        if agency.address:
            addr, _ = Address.objects.get_or_create(address=agency.address)
            AgencyAddress.objects.create(
                    agency=agency,
                    address=addr,
                    request_type='primary',
                    )
        if agency.email:
            try:
                email_addr = fetch(EmailAddress.objects, agency.email)
                AgencyEmail.objects.create(
                        agency=agency,
                        email=email_addr,
                        request_type='primary',
                        email_type='to',
                        )
            except ValueError as exc:
                print 'ERROR: Agency %s - %s - %s' % (agency.pk, agency.name, exc.args[0])
        if agency.other_emails:
            for email in email_separator_re.split(agency.other_emails):
                if not email:
                    continue
                try:
                    email_addr = fetch(EmailAddress.objects, email)
                    AgencyEmail.objects.create(
                            agency=agency,
                            email=email_addr,
                            request_type='primary',
                            email_type='cc',
                            )
                except ValueError as exc:
                    print 'ERROR: Agency %s - %s - %s' % (agency.pk, agency.name, exc.args[0])
        if agency.phone.strip() and agency.phone != 'n/a':
            for p in agency.phone.split(';'):
                phone, _ = PhoneNumber.objects.get_or_create(
                        number=p,
                        defaults={'type': 'phone'},
                        )
                if phone.number.national_number:
                    AgencyPhone.objects.create(
                            agency=agency,
                            phone=phone,
                            )
                else:
                    print 'ERROR: Agency phone: %s %s %s' % (agency.pk, agency.name, agency.phone)
        if agency.fax.strip() and agency.fax != 'n/a':
            for p in agency.fax.split(';'):
                phone, _ = PhoneNumber.objects.get_or_create(
                        number=p,
                        defaults={'type': 'fax'},
                        )
                if phone.number.national_number:
                    AgencyPhone.objects.create(
                            agency=agency,
                            phone=phone,
                            request_type='primary',
                            )
                else:
                    print 'ERROR: Agency fax: %s %s %s' % (agency.pk, agency.name, agency.fax)



class Migration(migrations.Migration):

    dependencies = [
        ('agency', '0011_auto_20171010_1007'),
        ('communication', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_addresses, lambda a, s: None),
    ]
